#pragma once
#define WORD_MAX 0xffff
#include "service.h"

#ifdef ENABLE_SPECIAL_INVENTORY
enum ESpecialInventory
{
	SPECIAL_INVENTORY_TYPE_SKILLBOOK,
	SPECIAL_INVENTORY_TYPE_STONE,
	SPECIAL_INVENTORY_TYPE_MATERIAL,
	SPECIAL_INVENTORY_TYPE_COUNT,

	SPECIAL_INVENTORY_WIDTH = 5,
	SPECIAL_INVENTORY_HEIGHT = 9,
	SPECIAL_INVENTORY_PAGE_SIZE = SPECIAL_INVENTORY_WIDTH * SPECIAL_INVENTORY_HEIGHT,
	SPECIAL_INVENTORY_SLOT_COUNT = SPECIAL_INVENTORY_PAGE_SIZE * SPECIAL_INVENTORY_TYPE_COUNT,
};
#endif

enum EMisc
{
	MAX_HOST_LENGTH			= 15,
	IP_ADDRESS_LENGTH		= 15,
	LOGIN_MAX_LEN			= 30,
	PASSWD_MAX_LEN			= 16,
	PLAYER_PER_ACCOUNT		= 4,
	ACCOUNT_STATUS_MAX_LEN	= 8,
	CHARACTER_NAME_MAX_LEN	= 48,
	SHOP_SIGN_MAX_LEN		= 32,
	ABILITY_MAX_NUM			= 50,
	EMPIRE_MAX_NUM			= 4,
	SOCIAL_ID_MAX_LEN		= 18,
	GUILD_NAME_MAX_LEN		= 12,
	SHOP_HOST_ITEM_MAX_NUM	= 40,
	SHOP_GUEST_ITEM_MAX_NUM = 18,
	SHOP_PRICELIST_MAX_NUM	= 40,
	CHAT_MAX_LEN			= 512,
	QUICKSLOT_MAX_NUM		= 36,
	QUERY_MAX_LEN			= 8192,
	PLAYER_EXP_TABLE_MAX	= 150,
	PLAYER_MAX_LEVEL_CONST	= 150,
	GUILD_MAX_LEVEL			= 20,
	SKILL_MAX_NUM			= 255,
	SKILLBOOK_DELAY_MIN		= 64800,
	SKILLBOOK_DELAY_MAX		= 108000, 
	SKILL_MAX_LEVEL			= 40,
	APPLY_NAME_MAX_LEN		= 32,
	EVENT_FLAG_NAME_MAX_LEN = 32,
	MOB_SKILL_MAX_NUM		= 5,
    POINT_MAX_NUM			= 255,
	DRAGON_SOUL_BOX_SIZE	= 32,
	DRAGON_SOUL_BOX_COLUMN_NUM = 8,
	DRAGON_SOUL_BOX_ROW_NUM = DRAGON_SOUL_BOX_SIZE / DRAGON_SOUL_BOX_COLUMN_NUM,
	DRAGON_SOUL_REFINE_GRID_SIZE = 15,
	MAX_AMOUNT_OF_MALL_BONUS	= 20,
	SHOP_TAB_NAME_MAX		= 32,
	SHOP_TAB_COUNT_MAX		= 3,
	BELT_INVENTORY_SLOT_WIDTH = 4,
	BELT_INVENTORY_SLOT_HEIGHT= 4,
	BELT_INVENTORY_SLOT_COUNT = BELT_INVENTORY_SLOT_WIDTH * BELT_INVENTORY_SLOT_HEIGHT,
	INVENTORY_PAGE_NUM		= 4,
	INVENTORY_HEIGHT		= 9,
	INVENTORY_WIDTH			= 5,
	INVENTORY_MAX_NUM = INVENTORY_HEIGHT * INVENTORY_WIDTH * INVENTORY_PAGE_NUM,
};

#ifdef ENABLE_SWITCHBOT

enum SwitchbotValues
{
	SWITCHBOT_SLOT_COUNT = 5,
	SWITCHBOT_ALTERNATIVE_COUNT = 2,
	//1 = Switching Item
	//2 = Yang
	SWITCHBOT_PRICE_TYPE = 1,
	//Amount Swtichting Items the Yang-Price
	SWITCHBOT_PRICE_AMOUNT = 1,
};

const DWORD c_arSwitchingItems[3] =
{
	39028,
	71084,
	76014,
};
#endif

enum MaxGold : long long
{
	GOLD_MAX = 1000000000000001LL,
};

enum EWearPositions
{
	WEAR_BODY,
	WEAR_HEAD,
	WEAR_FOOTS,
	WEAR_WRIST,
	WEAR_WEAPON,
	WEAR_NECK,
	WEAR_EAR,
	WEAR_UNIQUE1,
	WEAR_UNIQUE2,
	WEAR_ARROW,
	WEAR_SHIELD,
	WEAR_RING1,
	WEAR_RING2,
	WEAR_BELT,
	WEAR_PENDANT,
	WEAR_COSTUME_BODY,
	WEAR_COSTUME_HAIR,
	WEAR_COSTUME_ACCE,
	WEAR_COSTUME_WEAPON,
	WEAR_COSTUME_MOUNT,
	WEAR_COSTUME_PET,
	WEAR_MAX_NUM,
};

enum EDragonSoulDeckType
{
	DRAGON_SOUL_DECK_0,
	DRAGON_SOUL_DECK_1,
	DRAGON_SOUL_DECK_MAX_NUM = 2,
	DRAGON_SOUL_DECK_RESERVED_MAX_NUM = 3,
};

enum ESex
{
	SEX_MALE,
	SEX_FEMALE
};

enum EDirection
{
	DIR_NORTH,
	DIR_NORTHEAST,
	DIR_EAST,
	DIR_SOUTHEAST,
	DIR_SOUTH,
	DIR_SOUTHWEST,
	DIR_WEST,
	DIR_NORTHWEST,
	DIR_MAX_NUM
};

#define ABILITY_MAX_LEVEL	10

enum EAbilityDifficulty
{
	DIFFICULTY_EASY,
	DIFFICULTY_NORMAL,
	DIFFICULTY_HARD,
	DIFFICULTY_VERY_HARD,
	DIFFICULTY_NUM_TYPES
};

enum EAbilityCategory
{
	CATEGORY_PHYSICAL,
	CATEGORY_MENTAL,
	CATEGORY_ATTRIBUTE,
	CATEGORY_NUM_TYPES
};

enum EJobs
{
	JOB_WARRIOR,
	JOB_ASSASSIN,
	JOB_SURA,
	JOB_SHAMAN,
#ifdef ENABLE_WOLFMAN
	JOB_WOLFMAN,
#endif
	JOB_MAX_NUM
};

enum ESkillGroups
{
	SKILL_GROUP_MAX_NUM = 2,
};

enum ERaceFlags
{
	RACE_FLAG_ANIMAL	= (1 << 0),
	RACE_FLAG_UNDEAD	= (1 << 1),
	RACE_FLAG_DEVIL		= (1 << 2),
	RACE_FLAG_HUMAN		= (1 << 3),
	RACE_FLAG_ORC		= (1 << 4),
	RACE_FLAG_MILGYO	= (1 << 5),
	RACE_FLAG_INSECT	= (1 << 6),
	RACE_FLAG_FIRE		= (1 << 7),
	RACE_FLAG_ICE		= (1 << 8),
	RACE_FLAG_DESERT	= (1 << 9),
	RACE_FLAG_TREE		= (1 << 10),
	RACE_FLAG_ATT_ELEC	= (1 << 11),
	RACE_FLAG_ATT_FIRE	= (1 << 12),
	RACE_FLAG_ATT_ICE	= (1 << 13),
	RACE_FLAG_ATT_WIND	= (1 << 14),
	RACE_FLAG_ATT_EARTH = (1 << 15),
	RACE_FLAG_ATT_DARK	= (1 << 16),
	RACE_FLAG_ZODIAC	= (1 << 17),
};

enum ELoads
{
	LOAD_NONE,
	LOAD_LIGHT,
	LOAD_NORMAL,
	LOAD_HEAVY,
	LOAD_MASSIVE
};

enum
{
	QUICKSLOT_TYPE_NONE,
	QUICKSLOT_TYPE_ITEM,
	QUICKSLOT_TYPE_SKILL,
	QUICKSLOT_TYPE_COMMAND,
	QUICKSLOT_TYPE_MAX_NUM,
};

enum EParts
{
	PART_MAIN,
	PART_WEAPON,
	PART_HEAD,
	PART_HAIR,
	PART_ACCE,
	PART_MAX_NUM,
};

enum EChatType
{
	CHAT_TYPE_TALKING,
	CHAT_TYPE_INFO,
	CHAT_TYPE_NOTICE,
	CHAT_TYPE_PARTY,
	CHAT_TYPE_GUILD,
	CHAT_TYPE_COMMAND,
	CHAT_TYPE_SHOUT,
	CHAT_TYPE_WHISPER,
	CHAT_TYPE_BIG_NOTICE,
	CHAT_TYPE_MAX_NUM
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL			= 0,
	WHISPER_TYPE_NOT_EXIST		= 1,
	WHISPER_TYPE_TARGET_BLOCKED	= 2,
	WHISPER_TYPE_SENDER_BLOCKED	= 3,
	WHISPER_TYPE_ERROR			= 4,
	WHISPER_TYPE_GM				= 5,
	WHISPER_TYPE_SYSTEM			= 0xFF
};

enum ECharacterPosition
{
	POSITION_GENERAL,
	POSITION_BATTLE,
	POSITION_DYING,
	POSITION_SITTING_CHAIR,
	POSITION_SITTING_GROUND,
	POSITION_INTRO,
	POSITION_MAX_NUM
};

enum EGMLevels
{
	GM_PLAYER,
	GM_LOW_WIZARD,
	GM_WIZARD,
	GM_HIGH_WIZARD,
	GM_GOD,
	GM_IMPLEMENTOR
};

enum EMobRank
{
	MOB_RANK_PAWN,
	MOB_RANK_S_PAWN,
	MOB_RANK_KNIGHT,
	MOB_RANK_S_KNIGHT,
	MOB_RANK_BOSS,
	MOB_RANK_KING,
	MOB_RANK_MAX_NUM
};

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_BUILDING,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO,
	CHAR_TYPE_MOUNT,
	CHAR_TYPE_PET,
};

enum EBattleType
{
	BATTLE_TYPE_MELEE,
	BATTLE_TYPE_RANGE,
	BATTLE_TYPE_MAGIC,
	BATTLE_TYPE_SPECIAL,
	BATTLE_TYPE_POWER,
	BATTLE_TYPE_TANKER,
	BATTLE_TYPE_SUPER_POWER,
	BATTLE_TYPE_SUPER_TANKER,
	BATTLE_TYPE_MAX_NUM
};

enum EApplyTypes
{
	APPLY_NONE,
	APPLY_MAX_HP,
	APPLY_MAX_SP,
	APPLY_CON,
	APPLY_INT,
	APPLY_STR,
	APPLY_DEX,
	APPLY_ATT_SPEED,
	APPLY_MOV_SPEED,
	APPLY_CAST_SPEED,
	APPLY_HP_REGEN,
	APPLY_SP_REGEN,
	APPLY_POISON_PCT,
	APPLY_STUN_PCT,
	APPLY_SLOW_PCT,
	APPLY_CRITICAL_PCT,
	APPLY_PENETRATE_PCT,
	APPLY_ATTBONUS_HUMAN,
	APPLY_ATTBONUS_ANIMAL,
	APPLY_ATTBONUS_ORC,
	APPLY_ATTBONUS_MILGYO,
	APPLY_ATTBONUS_UNDEAD,
	APPLY_ATTBONUS_DEVIL,
	APPLY_STEAL_HP,
	APPLY_STEAL_SP,
	APPLY_MANA_BURN_PCT,
	APPLY_DAMAGE_SP_RECOVER,
	APPLY_BLOCK,
	APPLY_DODGE,
	APPLY_RESIST_SWORD,
	APPLY_RESIST_TWOHAND,
	APPLY_RESIST_DAGGER,
	APPLY_RESIST_BELL,
	APPLY_RESIST_FAN,
	APPLY_RESIST_BOW,
	APPLY_RESIST_FIRE,
	APPLY_RESIST_ELEC,
	APPLY_RESIST_MAGIC,
	APPLY_RESIST_WIND,
	APPLY_REFLECT_MELEE,
	APPLY_REFLECT_CURSE,
	APPLY_POISON_REDUCE,
	APPLY_KILL_SP_RECOVER,
	APPLY_EXP_DOUBLE_BONUS,
	APPLY_GOLD_DOUBLE_BONUS,
	APPLY_ITEM_DROP_BONUS,
	APPLY_POTION_BONUS,
	APPLY_KILL_HP_RECOVER,
	APPLY_IMMUNE_STUN,
	APPLY_IMMUNE_SLOW,
	APPLY_IMMUNE_FALL,
	APPLY_SKILL,
	APPLY_BOW_DISTANCE,
	APPLY_ATT_GRADE_BONUS,
	APPLY_DEF_GRADE_BONUS,
	APPLY_MAGIC_ATT_GRADE,
	APPLY_MAGIC_DEF_GRADE,
	APPLY_CURSE_PCT,
	APPLY_MAX_STAMINA,
	APPLY_ATTBONUS_WARRIOR,
	APPLY_ATTBONUS_ASSASSIN,
	APPLY_ATTBONUS_SURA,
	APPLY_ATTBONUS_SHAMAN,
	APPLY_ATTBONUS_MONSTER,
	APPLY_MALL_ATTBONUS,
	APPLY_MALL_DEFBONUS,
	APPLY_MALL_EXPBONUS,
	APPLY_MALL_ITEMBONUS,
	APPLY_MALL_GOLDBONUS,
	APPLY_MAX_HP_PCT,
	APPLY_MAX_SP_PCT,
	APPLY_SKILL_DAMAGE_BONUS,
	APPLY_NORMAL_HIT_DAMAGE_BONUS,
	APPLY_SKILL_DEFEND_BONUS,
	APPLY_NORMAL_HIT_DEFEND_BONUS,
	APPLY_PC_BANG_EXP_BONUS,
	APPLY_PC_BANG_DROP_BONUS,
	APPLY_EXTRACT_HP_PCT,
	APPLY_RESIST_WARRIOR,
	APPLY_RESIST_ASSASSIN,
	APPLY_RESIST_SURA,
	APPLY_RESIST_SHAMAN,
	APPLY_ENERGY,
	APPLY_DEF_GRADE,
	APPLY_COSTUME_ATTR_BONUS,
	APPLY_MAGIC_ATTBONUS_PER,
	APPLY_MELEE_MAGIC_ATTBONUS_PER,
	APPLY_RESIST_ICE,
	APPLY_RESIST_EARTH,
	APPLY_RESIST_DARK,
	APPLY_ANTI_CRITICAL_PCT,
	APPLY_ANTI_PENETRATE_PCT,
#ifdef ENABLE_WOLFMAN
	APPLY_BLEEDING_REDUCE,
	APPLY_BLEEDING_PCT,
	APPLY_ATTBONUS_WOLFMAN,
	APPLY_RESIST_WOLFMAN,
	APPLY_RESIST_CLAW,
#endif
	APPLY_RESIST_MAGIC_REDUCTION,
	APPLY_RESIST_HUMAN,
	APPLY_ACCEDRAIN_RATE,
	APPLY_ENCHANT_ELECT,
	APPLY_ENCHANT_FIRE,
	APPLY_ENCHANT_ICE,
	APPLY_ENCHANT_WIND,
	APPLY_ENCHANT_EARTH,
	APPLY_ENCHANT_DARK,
	MAX_APPLY_NUM,
};

enum EOnClickEvents
{
	ON_CLICK_NONE,
	ON_CLICK_SHOP,
	ON_CLICK_TALK,
	ON_CLICK_MAX_NUM
};

enum EOnIdleEvents
{
	ON_IDLE_NONE,
	ON_IDLE_GENERAL,
	ON_IDLE_MAX_NUM
};

enum EWindows
{
	RESERVED_WINDOW,
	INVENTORY,
	EQUIPMENT,
	SAFEBOX,
	MALL,
	DRAGON_SOUL_INVENTORY,
	BELT_INVENTORY,
#ifdef ENABLE_SWITCHBOT
	SWITCHBOT,
#endif
#ifdef ENABLE_ASLAN_BUFF_NPC_SYSTEM
	BUFF_EQUIPMENT,
#endif
	ACCE_REFINE,
	GROUND
};

enum EMobSizes
{
	MOBSIZE_RESERVED,
	MOBSIZE_SMALL,
	MOBSIZE_MEDIUM,
	MOBSIZE_BIG
};

enum EAIFlags
{
	AIFLAG_AGGRESSIVE		= (1 << 0),
	AIFLAG_NOMOVE			= (1 << 1),
	AIFLAG_COWARD			= (1 << 2),
	AIFLAG_NOATTACKSHINSU	= (1 << 3),
	AIFLAG_NOATTACKJINNO	= (1 << 4),
	AIFLAG_NOATTACKCHUNJO	= (1 << 5),
	AIFLAG_ATTACKMOB		= (1 << 6),
	AIFLAG_BERSERK			= (1 << 7),
	AIFLAG_STONESKIN		= (1 << 8),
	AIFLAG_GODSPEED			= (1 << 9),
	AIFLAG_DEATHBLOW		= (1 << 10),
	AIFLAG_REVIVE			= (1 << 11),
};

enum EMobStatType
{
	MOB_STATTYPE_POWER,
	MOB_STATTYPE_TANKER,
	MOB_STATTYPE_SUPER_POWER,
	MOB_STATTYPE_SUPER_TANKER,
	MOB_STATTYPE_RANGE,
	MOB_STATTYPE_MAGIC,
	MOB_STATTYPE_MAX_NUM
};

enum EImmuneFlags
{
	IMMUNE_STUN		= (1 << 0),
	IMMUNE_SLOW		= (1 << 1),
	IMMUNE_FALL		= (1 << 2),
	IMMUNE_CURSE	= (1 << 3),
	IMMUNE_POISON	= (1 << 4),
	IMMUNE_TERROR	= (1 << 5),
	IMMUNE_REFLECT	= (1 << 6),
};

enum EMobEnchants
{
	MOB_ENCHANT_CURSE,
	MOB_ENCHANT_SLOW,
	MOB_ENCHANT_POISON,
	MOB_ENCHANT_STUN,
	MOB_ENCHANT_CRITICAL,
	MOB_ENCHANT_PENETRATE,
	MOB_ENCHANTS_MAX_NUM
};

enum EMobResists
{
	MOB_RESIST_SWORD,
	MOB_RESIST_TWOHAND,
	MOB_RESIST_DAGGER,
	MOB_RESIST_BELL,
	MOB_RESIST_FAN,
	MOB_RESIST_BOW,
#ifdef ENABLE_WOLFMAN
	MOB_RESIST_CLAW,
#endif
	MOB_RESIST_FIRE,
	MOB_RESIST_ELECT,
	MOB_RESIST_MAGIC,
	MOB_RESIST_WIND,
	MOB_RESIST_POISON,
#ifdef ENABLE_WOLFMAN
	MOB_RESIST_BLEEDING,
#endif
	MOB_RESISTS_MAX_NUM
};

enum
{
	SKILL_ATTR_TYPE_NORMAL = 1,
	SKILL_ATTR_TYPE_MELEE,
	SKILL_ATTR_TYPE_RANGE,
	SKILL_ATTR_TYPE_MAGIC
};

enum
{
	SKILL_NORMAL,
	SKILL_MASTER,
	SKILL_GRAND_MASTER,
	SKILL_PERFECT_MASTER,
};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD,
	GUILD_WAR_TYPE_BATTLE,
	GUILD_WAR_TYPE_FLAG,
	GUILD_WAR_TYPE_MAX_NUM
};

enum EGuildWarState
{
	GUILD_WAR_NONE,
	GUILD_WAR_SEND_DECLARE,
	GUILD_WAR_REFUSE,
	GUILD_WAR_RECV_DECLARE,
	GUILD_WAR_WAIT_START,
	GUILD_WAR_CANCEL,
	GUILD_WAR_ON_WAR,
	GUILD_WAR_END,
	GUILD_WAR_OVER,
	GUILD_WAR_RESERVE,
	GUILD_WAR_DURATION = 30*60,
	GUILD_WAR_WIN_POINT = 1000,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12*60*60,
};

enum EAttributeSet 
{            
	ATTRIBUTE_SET_WEAPON,
	ATTRIBUTE_SET_BODY, 
	ATTRIBUTE_SET_WRIST, 
	ATTRIBUTE_SET_FOOTS,
	ATTRIBUTE_SET_NECK,
	ATTRIBUTE_SET_HEAD,
	ATTRIBUTE_SET_SHIELD,
	ATTRIBUTE_SET_EAR,
	ATTRIBUTE_SET_MAX_NUM
};  

enum EPrivType
{
	PRIV_NONE,
	PRIV_ITEM_DROP,
	PRIV_GOLD_DROP,
	PRIV_GOLD10_DROP,
	PRIV_EXP_PCT,
	MAX_PRIV_NUM,
};

enum EPremiumTypes
{
	PREMIUM_EXP,
	PREMIUM_ITEM,
	PREMIUM_SAFEBOX,
	PREMIUM_AUTOLOOT,
	PREMIUM_FISH_MIND,
	PREMIUM_MARRIAGE_FAST,
	PREMIUM_GOLD,
	PREMIUM_MAX_NUM = 9
};

#ifdef ENABLE_ITEMSHOP
enum
{
	ITEMSHOP_CATEGORY_MAX_LEN = 24,
	ITEMSHOP_ICON_MAX_LEN = 24,
	ITEMSHOP_HASH_MAX_LEN = 32,
	PROMOTION_CODE_MAX_LEN = 48,
};
#endif

enum SPECIAL_EFFECT
{
	SE_NONE,
	SE_HPUP_RED,
	SE_SPUP_BLUE,
	SE_SPEEDUP_GREEN,
	SE_DXUP_PURPLE,
	SE_CRITICAL,
	SE_PENETRATE,
	SE_BLOCK,
	SE_DODGE,
	SE_CHINA_FIREWORK,
	SE_SPIN_TOP,
	SE_SUCCESS,
	SE_FAIL,
	SE_FR_SUCCESS,
	SE_LEVELUP_ON_14_FOR_GERMANY,
	SE_LEVELUP_UNDER_15_FOR_GERMANY,
	SE_PERCENT_DAMAGE1,
	SE_PERCENT_DAMAGE2,
	SE_PERCENT_DAMAGE3,
	SE_AUTO_HPUP,
	SE_AUTO_SPUP,
	SE_EQUIP_RAMADAN_RING,
	SE_EQUIP_HALLOWEEN_CANDY,
	SE_EQUIP_HAPPINESS_RING,
	SE_EQUIP_LOVE_PENDANT,
	SE_ACCE_SUCESS_ABSORB,
	SE_ACCE_EQUIP,
	SE_ACCE_BACK,
};

#include "item_length.h"

enum EDragonSoulRefineWindowSize
{
	DRAGON_SOUL_REFINE_GRID_MAX = 15,
};

enum EMisc2
{
	DRAGON_SOUL_EQUIP_SLOT_START = INVENTORY_MAX_NUM + WEAR_MAX_NUM,
	DRAGON_SOUL_EQUIP_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_START + (DS_SLOT_MAX * DRAGON_SOUL_DECK_MAX_NUM),
	DRAGON_SOUL_EQUIP_RESERVED_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_END + (DS_SLOT_MAX * DRAGON_SOUL_DECK_RESERVED_MAX_NUM),
	BELT_INVENTORY_SLOT_START = DRAGON_SOUL_EQUIP_RESERVED_SLOT_END,
	BELT_INVENTORY_SLOT_END = BELT_INVENTORY_SLOT_START + BELT_INVENTORY_SLOT_COUNT,
#ifndef ENABLE_SPECIAL_INVENTORY
	INVENTORY_AND_EQUIP_SLOT_MAX = BELT_INVENTORY_SLOT_END,
#else
	SPECIAL_INVENTORY_SLOT_START = BELT_INVENTORY_SLOT_END,
	SPECIAL_INVENTORY_SKILLBOOK_START = SPECIAL_INVENTORY_SLOT_START,
	SPECIAL_INVENTORY_SKILLBOOK_END = SPECIAL_INVENTORY_SKILLBOOK_START + SPECIAL_INVENTORY_PAGE_SIZE * INVENTORY_PAGE_NUM,
	SPECIAL_INVENTORY_STONE_START = SPECIAL_INVENTORY_SKILLBOOK_END,
	SPECIAL_INVENTORY_STONE_END = SPECIAL_INVENTORY_STONE_START + SPECIAL_INVENTORY_PAGE_SIZE * INVENTORY_PAGE_NUM,
	SPECIAL_INVENTORY_MATERIAL_START = SPECIAL_INVENTORY_STONE_END,
	SPECIAL_INVENTORY_MATERIAL_END = SPECIAL_INVENTORY_MATERIAL_START + SPECIAL_INVENTORY_PAGE_SIZE * INVENTORY_PAGE_NUM,
	SPECIAL_INVENTORY_SLOT_END = SPECIAL_INVENTORY_MATERIAL_END,

	INVENTORY_AND_EQUIP_SLOT_MAX = SPECIAL_INVENTORY_SLOT_END,
#endif
};

#ifdef ENABLE_ASLAN_BUFF_NPC_SYSTEM
enum EBuffWindowSlots
{
	BUFF_WEAR_WEAPON,		// 0
	BUFF_WEAR_HEAD,			// 1
	BUFF_WEAR_BODY,			// 2
	BUFF_WEAR_UNIQUE,		// 3
	BUFF_SLOT_SKILLBOOK,		// 4
	BUFF_SLOT_SKILLBOOK_COMMON_1,		// 5
	BUFF_SLOT_SKILLBOOK_COMMON_2,		// 6
	
	BUFF_SLOT_CHANGE_NAME,		// 7
	BUFF_SLOT_CHANGE_SEX,		// 8
	BUFF_SLOT_RESET_SKILL,		// 9
	
	BUFF_WINDOW_SLOT_MAX_NUM,
};
#endif

#pragma pack(push, 1)

typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
    SItemPos ()
    {
        window_type = INVENTORY;
		cell = WORD_MAX;
    }

	SItemPos (BYTE _window_type, WORD _cell)
    {
        window_type = _window_type;
        cell = _cell;
    }

	bool IsValidItemPosition() const
	{
		switch (window_type)
		{
		case RESERVED_WINDOW:
			return false;
		case INVENTORY:
		case EQUIPMENT:
		case BELT_INVENTORY:
			return cell < INVENTORY_AND_EQUIP_SLOT_MAX;
		case DRAGON_SOUL_INVENTORY:
			return cell < (DRAGON_SOUL_INVENTORY_MAX_NUM);
		case SAFEBOX:
		case MALL:
			return false;
#ifdef ENABLE_SWITCHBOT
		case SWITCHBOT:
			return cell < SWITCHBOT_SLOT_COUNT;
#endif
#ifdef ENABLE_ASLAN_BUFF_NPC_SYSTEM
		case BUFF_EQUIPMENT:
			return cell < (BUFF_WINDOW_SLOT_MAX_NUM);
#endif
		default:
			return false;
		}
		return false;
	}
	
	bool IsEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && cell >= INVENTORY_MAX_NUM && cell < INVENTORY_MAX_NUM + WEAR_MAX_NUM)
			|| IsDragonSoulEquipPosition();
	}

	bool IsDragonSoulEquipPosition() const
	{
		return (DRAGON_SOUL_EQUIP_SLOT_START <= cell) && (DRAGON_SOUL_EQUIP_SLOT_END > cell);
	}

	bool IsBeltInventoryPosition() const
	{
		return (BELT_INVENTORY_SLOT_START <= cell) && (BELT_INVENTORY_SLOT_END > cell);
	}

	bool IsDefaultInventoryPosition() const
	{
		return INVENTORY == window_type && cell < INVENTORY_MAX_NUM;
	}

#ifdef ENABLE_SPECIAL_INVENTORY
	bool IsSpecialInventoryPosition() const
	{
		return INVENTORY == window_type && cell >= SPECIAL_INVENTORY_SLOT_START && cell < SPECIAL_INVENTORY_SLOT_END;
	}

	int GetSpecialInventoryType()
	{
		if (cell >= SPECIAL_INVENTORY_SKILLBOOK_START && cell < SPECIAL_INVENTORY_SKILLBOOK_END)
		{
			return SPECIAL_INVENTORY_TYPE_SKILLBOOK;
		}
		else if (cell >= SPECIAL_INVENTORY_STONE_START && cell < SPECIAL_INVENTORY_STONE_END)
		{
			return SPECIAL_INVENTORY_TYPE_STONE;
		}
		else if (cell >= SPECIAL_INVENTORY_MATERIAL_START && cell < SPECIAL_INVENTORY_MATERIAL_END)
		{
			return SPECIAL_INVENTORY_TYPE_MATERIAL;
		}
		else
		{
			return -1;
		}
	}
#endif

#ifdef ENABLE_SWITCHBOT
	bool IsSwitchbotPosition() const
	{
		return SWITCHBOT == window_type && cell < SWITCHBOT_SLOT_COUNT;
	}
#endif

#ifdef ENABLE_ASLAN_BUFF_NPC_SYSTEM
	bool IsBuffEquipmentPosition() const
	{
		return BUFF_EQUIPMENT == window_type && cell < (BUFF_WINDOW_SLOT_MAX_NUM);
	}
#endif

	bool operator==(const struct SItemPos& rhs) const
	{
		return (window_type == rhs.window_type) && (cell == rhs.cell);
	}
	bool operator<(const struct SItemPos& rhs) const
	{
		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));
	}
} TItemPos;

const TItemPos NPOS (RESERVED_WINDOW, WORD_MAX);

#ifdef ENABLE_SPECIAL_INVENTORY
struct SpecialInventoryRange
{
	BYTE type;
	WORD start;
	WORD end;

	SpecialInventoryRange()
	{
		type = 0;
		start = 0;
		end = 0;
	}

	SpecialInventoryRange(BYTE _type)
	{
		type = _type;

		if (type == SPECIAL_INVENTORY_TYPE_SKILLBOOK)
		{
			start = SPECIAL_INVENTORY_SKILLBOOK_START;
			end = SPECIAL_INVENTORY_SKILLBOOK_END;
		}
		else if (type == SPECIAL_INVENTORY_TYPE_STONE)
		{
			start = SPECIAL_INVENTORY_STONE_START;
			end = SPECIAL_INVENTORY_STONE_END;
		}
		else if (type == SPECIAL_INVENTORY_TYPE_MATERIAL)
		{
			start = SPECIAL_INVENTORY_MATERIAL_START;
			end = SPECIAL_INVENTORY_MATERIAL_END;
		}
	}
};
#endif 

typedef enum
{
	SHOP_COIN_TYPE_GOLD,
	SHOP_COIN_TYPE_SECONDARY_COIN,
} EShopCoinType;

#pragma pack(pop)
